// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserTestsDL;

namespace UserTestsDL.Migrations
{
    [DbContext(typeof(UserTestDBContext))]
    [Migration("20210623144707_migation6242021")]
    partial class migation6242021
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("UserTestsModels.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Name")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("UserTestsModels.TypeTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("NumberOfErrors")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfWords")
                        .HasColumnType("integer");

                    b.Property<int>("TimeTaken")
                        .HasColumnType("integer");

                    b.Property<int>("UserStatId")
                        .HasColumnType("integer");

                    b.Property<double>("WPM")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("UserStatId");

                    b.ToTable("TypeTests");
                });

            modelBuilder.Entity("UserTestsModels.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Auth0Id")
                        .HasColumnType("text");

                    b.Property<int>("Revapoints")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Auth0Id")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserTestsModels.UserStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("AverageAccuracy")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageWPM")
                        .HasColumnType("double precision");

                    b.Property<int>("NumberOfTests")
                        .HasColumnType("integer");

                    b.Property<int>("TotalTestTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserStats");
                });

            modelBuilder.Entity("UserTestsModels.UserStatCatJoin", b =>
                {
                    b.Property<int>("UserStatId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.HasKey("UserStatId", "UserId", "CategoryId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserStatId")
                        .IsUnique();

                    b.ToTable("UserStatCatJoins");
                });

            modelBuilder.Entity("UserTestsModels.TypeTest", b =>
                {
                    b.HasOne("UserTestsModels.UserStat", "UserStat")
                        .WithMany("TypeTests")
                        .HasForeignKey("UserStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserStat");
                });

            modelBuilder.Entity("UserTestsModels.UserStatCatJoin", b =>
                {
                    b.HasOne("UserTestsModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserTestsModels.UserStat", "UserStat")
                        .WithOne("UserStatCatJoin")
                        .HasForeignKey("UserTestsModels.UserStatCatJoin", "UserStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserStat");
                });

            modelBuilder.Entity("UserTestsModels.UserStat", b =>
                {
                    b.Navigation("TypeTests");

                    b.Navigation("UserStatCatJoin");
                });
#pragma warning restore 612, 618
        }
    }
}
